#!/usr/bin/env python3

import sys
import os
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed

# Add the parent directory to the path to import modules
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

# Import from shared utilities
from shared_utils.data_access import get_all_ip_addresses
from shared_utils.progress_reporting import (
    print_startup_banner, 
    print_ip_retrieval_info, 
    print_progress_update, 
    print_scan_summary
)

# Import local modules
from scanners.batch_scanner import scan_multiple_ips_with_session

def main():
    """
    Main function for vulnerability scanning service using new modular batch scanner
    """
    import argparse
    
    parser = argparse.ArgumentParser(description='🛡️ Vulnerability scanning service for Solana validators')
    parser.add_argument('--scan-type', 
                       choices=['quick', 'default', 'comprehensive'], 
                       default='default',
                       help='Type of vulnerability scan (default: default)')
    parser.add_argument('--limit', type=int, help='Limit number of IPs to scan')
    parser.add_argument('--threads', type=int, default=10, 
                       help='Number of concurrent threads (default: 10)')
    parser.add_argument('--verbose', '-v', action='store_true', 
                       help='Enable verbose output')
    
    args = parser.parse_args()
    
    print(f"🚀 Starting vulnerability scan with type: {args.scan_type}")
    
    # Use new modular batch scanner
    if args.verbose:
        print_startup_banner(args.threads, scan_type="vulnerability")
    
    # Get all IP addresses from database
    ip_data_list = get_all_ip_addresses()
    
    if args.verbose and not print_ip_retrieval_info(len(ip_data_list), args.limit, args.threads):
        return
    elif not args.verbose and len(ip_data_list) == 0:
        print("❌ No IP addresses found in database")
        return
    
    # Apply limit if specified
    if args.limit:
        ip_data_list = ip_data_list[:args.limit]
        if args.verbose:
            print(f"🔢 Limiting vulnerability scan to first {args.limit} IP addresses")
    
    # Run batch scan using new modular scanner
    start_time = datetime.now()
    result = scan_multiple_ips_with_session(
        ip_list=ip_data_list,
        scan_type=args.scan_type,
        verbose=args.verbose,
        max_threads=args.threads
    )
    
    # Print results
    if result['success']:
        end_time = datetime.now()
        total_time = end_time - start_time
        
        if args.verbose:
            print("\n" + "="*80)
            print("🛡️  VULNERABILITY SCAN SUMMARY")
            print("="*80)
            print(f"📊 Scan Results:")
            print(f"   • Total IPs targeted: {len(ip_data_list)}")
            print(f"   • Successfully scanned: {result['completed_ips']}")
            print(f"   • Failed scans: {result['failed_ips']}")
            print(f"   • Total vulnerabilities found: {result['total_vulnerabilities']}")
            print(f"⏱️  Total scan time: {total_time}")
            print(f"🔗 Session ID: {result['session_id']}")
            print("="*80)
        else:
            print(f"Vulnerability scan complete: {result['completed_ips']} IPs scanned, {result['total_vulnerabilities']} vulnerabilities found in {total_time}")
    else:
        print(f"❌ Scan failed: {result.get('error', 'Unknown error')}")

if __name__ == "__main__":
    main()
