#!/usr/bin/env python3

from dataclasses import dataclass
from typing import Optional, List

@dataclass
class Vulnerability:
    """Data class representing a vulnerability"""
    vulnerability_id: str
    title: str
    description: str
    severity: str
    cvss_score: Optional[float]
    solution: str
    reference_urls: List[str]
    script_output: str
    confidence_level: str
    affected_port: Optional[int]
    affected_service: str
    protocol: Optional[str]
    
    def to_dict(self):
        """Convert vulnerability to dictionary"""
        return {
            'vulnerability_id': self.vulnerability_id,
            'title': self.title,
            'description': self.description,
            'severity': self.severity,
            'cvss_score': self.cvss_score,
            'solution': self.solution,
            'reference_urls': self.reference_urls,
            'script_output': self.script_output,
            'confidence_level': self.confidence_level,
            'affected_port': self.affected_port,
            'affected_service': self.affected_service,
            'protocol': self.protocol
        }
    
    @classmethod
    def from_dict(cls, data):
        """Create vulnerability from dictionary"""
        return cls(**data)
    
    def __str__(self):
        port_info = f":{self.affected_port}" if self.affected_port else ""
        return f"{self.vulnerability_id} - {self.severity.upper()} - {self.affected_service}{port_info}" 