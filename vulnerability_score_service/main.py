#!/usr/bin/env python3

import sys
import os
from datetime import datetime

# Add the parent directory to the path to import modules
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from shared_utils.data_access import get_all_ip_addresses
from shared_utils.progress_reporting import (
    print_startup_banner,
    print_ip_retrieval_info,
    print_progress_update,
    print_scan_summary
)
from db_service.connection import get_db_connection
from calculate_security_scores import calculate_and_save_security_scores

def main():
    """
    Main function for vulnerability score calculation service
    """
    import argparse
    
    parser = argparse.ArgumentParser(description='üîê Security score calculation service for Solana validators')
    parser.add_argument('--limit', type=int, help='Limit number of IPs to calculate scores for')
    parser.add_argument('--verbose', '-v', action='store_true', help='Enable verbose output')
    parser.add_argument('--clean-old', action='store_true', default=True, 
                       help='Clean old entries before inserting new ones (default: True)')
    
    args = parser.parse_args()
    
    print("üöÄ Starting security score calculation service")
    
    if args.verbose:
        print_startup_banner(1, scan_type="score", service_name="Security Score Calculator")
    
    # Get all IP addresses from database
    ip_data_list = get_all_ip_addresses()
    
    if args.verbose and not print_ip_retrieval_info(len(ip_data_list), args.limit, scan_type="score"):
        return
    elif not args.verbose and len(ip_data_list) == 0:
        print("‚ùå No IP addresses found in database")
        return
    
    if args.verbose:
        print(f"üìä Found {len(ip_data_list)} validators with IP addresses")
    
    # Apply limit if specified
    if args.limit:
        ip_data_list = ip_data_list[:args.limit]
        if args.verbose:
            print(f"üî¢ Limiting score calculation to first {args.limit} validators")
    
    # Calculate and save security scores
    start_time = datetime.now()
    
    try:
        result = calculate_and_save_security_scores(
            ip_data_list=ip_data_list,
            verbose=args.verbose,
            clean_old=args.clean_old
        )
        
        end_time = datetime.now()
        total_time = end_time - start_time
        
        if result['success']:
            if args.verbose:
                # Use the shared scan summary function for consistency
                print_scan_summary(
                    completed_scans=[1] * result['scores_calculated'],  # Mock completed scans
                    failed_scans=[],
                    total_items_saved=result['scores_calculated'],
                    total_time=total_time,
                    total_ips=result['total_processed'],
                    scan_type="score"
                )
                print(f"\nüìä Score Statistics:")
                print(f"   ‚Ä¢ Average score: {result['average_score']:.1f}")
                print(f"   ‚Ä¢ Lowest score: {result['lowest_score']:.1f}")
                print(f"   ‚Ä¢ Highest score: {result['highest_score']:.1f}")
            else:
                print(f"Security score calculation complete: {result['scores_calculated']} scores calculated in {total_time}")
        else:
            print(f"‚ùå Score calculation failed: {result.get('error', 'Unknown error')}")
            
    except Exception as e:
        print(f"‚ùå Error during score calculation: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    main()
