#!/bin/bash
# Vulnerability score calculation service entry point

# Source environment setup
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../utils/setup_env.sh"

# Configuration
SERVICE_NAME="vulnerability_score"
LOCK_FILE="/tmp/locks/${SERVICE_NAME}_service.lock"
SERVICE_TIMEOUT=1800  # 30 minutes (score calculation should be faster than scanning)
LIMIT="${LIMIT:-}"
VERBOSE="${VERBOSE:-false}"
CLEAN_OLD="${CLEAN_OLD:-true}"

# Set up signal handlers for cleanup
setup_signal_handlers "$LOCK_FILE"

# Function to run vulnerability score service
run_vulnerability_score_service() {
    log_info "Starting Vulnerability Score Calculation Service..."
    log_info "================================================="
    
    # Create lock to prevent concurrent runs
    if ! create_lock "$LOCK_FILE" "$SERVICE_NAME"; then
        return 1
    fi
    
    # Check if the vulnerability score service exists
    if [ ! -f "$PROJECT_ROOT/vulnerability_score_service/main.py" ]; then
        log_error "Vulnerability score service main.py not found at: $PROJECT_ROOT/vulnerability_score_service/main.py"
        return 1
    fi
    
    # Build command arguments
    local cmd_args=""
    
    if [ -n "$LIMIT" ]; then
        cmd_args="$cmd_args --limit=$LIMIT"
    fi
    
    if [ "$VERBOSE" = "true" ]; then
        cmd_args="$cmd_args --verbose"
    fi
    
    if [ "$CLEAN_OLD" = "true" ]; then
        cmd_args="$cmd_args --clean-old"
    fi
    
    log_info "Running vulnerability score calculation service..."
    log_info "Limit: ${LIMIT:-'No limit'}"
    log_info "Verbose: $VERBOSE"
    log_info "Clean old entries: $CLEAN_OLD"
    log_info "Executing: python3 $PROJECT_ROOT/vulnerability_score_service/main.py $cmd_args"
    
    if timeout_cmd "$SERVICE_TIMEOUT" python3 "$PROJECT_ROOT/vulnerability_score_service/main.py" $cmd_args; then
        log_info "Vulnerability score calculation service completed successfully"
        return 0
    else
        local exit_code=$?
        log_error "Vulnerability score calculation service failed (exit code: $exit_code)"
        
        if [ $exit_code -eq 124 ]; then
            log_error "Service timed out after $SERVICE_TIMEOUT seconds"
        fi
        
        return 1
    fi
}

# Cleanup function
cleanup() {
    log_info "Cleaning up vulnerability score service..."
    remove_lock "$LOCK_FILE"
}

# Set up cleanup on exit
trap cleanup EXIT

# Main execution
log_info "Vulnerability score calculation service starting at $(date)"
log_info "Lock file: $LOCK_FILE"
log_info "Service timeout: ${SERVICE_TIMEOUT}s"

if run_vulnerability_score_service; then
    log_info "Vulnerability score calculation service completed successfully at $(date)"
    exit 0
else
    log_error "Vulnerability score calculation service failed at $(date)"
    exit 1
fi 